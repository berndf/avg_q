#!/usr/bin/env python

import argparse
argparser = argparse.ArgumentParser(description='Plot PSGs.')
argparser.add_argument('files', nargs='+', help='''SL files or book numbers of nights to show.
This takes the form file[+triggerfile]
where triggerfile is an avg_q (text) format trigger file to show as vertical lines.''')
argparser.add_argument('-a', '--abstime', dest='abstime', action='store_true', help='Show absolute time instead of minutes since start.')
argparser.add_argument('-c', '--cycles', dest='cycles', action='store_true', help='Show REM/NREM cycle boundaries')
argparser.add_argument('-n', '--notrim', dest='notrim', action='store_true', help='Do not trim wake from beginning/end')
argparser.add_argument('-s', '--save_fig', dest='save_fig', action='store_true', help='Save plots to .pdf instead of showing them')
args = argparser.parse_args()

import avg_q.Sleep.slfile
import avg_q.Sleep.slplot
import matplotlib.pyplot as plt

figno=1
for slfile_and_triggerfile in args.files:
 fsplit=slfile_and_triggerfile.split('+')
 if len(fsplit)==1:
  slfile=slfile_and_triggerfile
  trgfile=None
 else:
  slfile=fsplit[0]
  trgfile=fsplit[1]
 if args.save_fig:
  import os
  base,ext=os.path.splitext(slfile)
  pdffile=base+'.pdf'
  if os.path.exists(pdffile):
   print("%s exists!" % pdffile)
   continue
  print("Plotting %s to %s" % (slfile,pdffile))
 sl=avg_q.Sleep.slfile.slfile(slfile)
 print("SL file: %s" % sl.filename)
 fig=plt.figure(figno)
 fig.canvas.manager.set_window_title(slfile)
 axes=avg_q.Sleep.slplot.slplot(sl,abstime=args.abstime,trim=not args.notrim)
 if args.cycles:
  remstarts=[]
  nremstarts=[]
  for pos in range(1,len(sl.tuples)):
   if sl.remcycles[pos].remcycle>sl.remcycles[pos-1].remcycle:
    remstarts.append(sl.abstime[pos] if args.abstime else sl.tuples[pos].time)
   if sl.remcycles[pos].nremcycle>sl.remcycles[pos-1].nremcycle:
    nremstarts.append(sl.abstime[pos] if args.abstime else sl.tuples[pos].time)
  ymin,ymax=axes.get_ylim()
  axes.vlines(remstarts,ymin,ymax, color='red', linewidth=0.5, linestyle='solid')
  axes.vlines(nremstarts,ymin,ymax, color='blue', linewidth=0.5, linestyle='solid')
 if trgfile:
  import avg_q.trgfile
  with avg_q.trgfile.trgfile(trgfile) as trg:
   if args.abstime:
    trg.start_datetime=sl.start_datetime
    events=[x[0] for x in trg.gettuples_abstime()]
   else:
    tup=trg.gettuples()
    sfreq=float(trg.preamble.get('Sfreq',100.0))
    time_offset= [x.time for x in sl.tuples].index(0)*sl.minutes_per_epoch
    events=[x[0]/sfreq/60-time_offset for x in tup] # Time in min
   ymin,ymax=axes.get_ylim()
   axes.vlines(events,ymin,ymax, color='black', linewidth=0.5, linestyle='solid')
 if args.save_fig:
  plt.savefig(pdffile,format='pdf')
  plt.close()
 else:
  figno+=1
if not args.save_fig:
 plt.show()
 plt.close()
