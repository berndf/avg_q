#!/usr/bin/env python
# Copyright (C) 2009-2013 Bernd Feige
# This file is part of avg_q and released under the GPL v3 (see avg_q/COPYING).

import avg_q
from avg_q.avg_q_file import formats_and_extensions
import os
import fnmatch

import argparse
argparser = argparse.ArgumentParser(description='Load multichannel data and show it using avg_q.posplot')
argparser.add_argument('files', nargs='+', help='''files to show.
This takes the form [format:]datapath[+triggerfile]
where format is one of the format identifiers known to avg_q (default: autodetect based upon file extension) and
triggerfile is an avg_q (text) format trigger file from which to load event markers.''')
argparser.add_argument('-f', '--fromepoch', type=int, dest='fromepoch', help='Start with this epoch instead of 1')
argparser.add_argument('-e', '--epochs', type=int, dest='epochs', help='Load at most this number of epochs')
argparser.add_argument('-E', '--epochlen', default=0, dest='epochlen', help='''
Epoch duration in avg_q points (eg 100, 5.5s, 200ms).
The default 0 reads full epochs from epoched file formats
or entire continuous files as a single epoch.''')
argparser.add_argument('-N', '--notrig', dest='notrig', action='store_true', help='''
No trigtransfer. Normally triggers are read but some file types have to be read
completely to build the trigger list, so that display is speedier when suppressing triggers.
''')
argparser.add_argument('-a', '--appendopt', default='l', choices=['l','p','c','i'], dest='appendopt', help='(l)ink epochs in memory (default) or append (p)oints, (c)hannels or (i)tems')
argparser.add_argument('-t', '--tracelevel', type=int, default=0, dest='tracelevel', help='Set avg_q trace level (verbosity)')
argparser.add_argument('-d', '--debug', dest='debug', action='store_true', help='Debug mode, ie dump avg_q scripts to stdout during processing')
args = argparser.parse_args()

a=avg_q.avg_q(avg_q='avg_q_ui',tracelevel=args.tracelevel,iconify=True)
a.debug=args.debug
script=avg_q.Script(a)
for filename_and_triggerfile in args.files:
 fsplit=filename_and_triggerfile.split('+')
 if len(fsplit)==1:
  filename=filename_and_triggerfile
  trgfile=None
 else:
  filename=fsplit[0]
  trgfile=fsplit[1]
 if filename.startswith('file://'):
  filename=filename[7:]
 parts=filename.split(':')
 #print(parts)
 if len(parts)==2 and parts[0] in dict(formats_and_extensions):
  filetype,filename=parts
 else:
  filetype=None
 base,ext=os.path.splitext(filename)
 addmethods=None
 if filetype is None and ext=='':
  # Try to interpret this as a sleep bookno
  import avg_q.Sleep.sleep_file
  print("Reading sleep file for bookno: %s" % filename)
  infile=avg_q.Sleep.sleep_file.sleep_file(filename)
 else:
  if not os.path.exists(filename):
   print("Oops, %s doesn't exist - skipping..." % filename)
   continue
  print("Opening file: %s type %s" % (filename,filetype))
  infile=avg_q.avg_q_file(filename,filetype)
 if trgfile:
  if infile.fileformat=='asc':
   addmethods=['set triggers_from_trigfile '+trgfile]
 else:
  if infile.fileformat=='Inomed':
   trgfile=filename+'.tri'
  elif infile.fileformat=='Coherence':
   trgfile=base+'.markers'
   if os.path.exists('channelpos.klin'):
    addmethods=['set_channelposition -s @channelpos.klin']
  else:
   trgfile=base+'.trg'
 if os.path.exists(trgfile):
  infile.trigfile=trgfile
 if fnmatch.fnmatch(filename,'*_residuals[0-9][0-9].hdf'):
  # Show fMRI gradient correction residual files
  epochsource=avg_q.Epochsource(infile, 0, '1s', continuous=True, fromepoch=args.fromepoch, epochs=args.epochs)
 else:
  epochsource=avg_q.Epochsource(infile, 0, args.epochlen, continuous=True, fromepoch=args.fromepoch, epochs=args.epochs, trigtransfer=not args.notrig)
 if addmethods is not None:
  epochsource.add_branchtransform(addmethods)
 script.add_Epochsource(epochsource)
if len(script.Epochsource_list)==0:
 print("Oops, don't have any files to display...")
else:
 script.set_collect('''
append -%(appendopt)s
''' % {'appendopt': args.appendopt})
 script.add_postprocess('posplot')
 script.run()
a.close()
