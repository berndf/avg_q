#!/usr/bin/env python
# Copyright (C) 2010-2018 Bernd Feige
# This file is part of avg_q and released under the GPL v3 (see avg_q/COPYING).

import argparse
argparser = argparse.ArgumentParser(description='Show asc file as color maps')
argparser.add_argument('ascfiles', nargs='+', help='asc files to plot')
argparser.add_argument('-r', '--resample', dest='resample', help='Resample to this step width (points/time spec) before plotting')
argparser.add_argument('-R', '--remove_channel', dest='remove_channel', help='Remove these channels before plotting')
argparser.add_argument('-x', '--xrange', dest='xrange', nargs=2, help='Trim epoch to this x range before plotting')
argparser.add_argument('-d', '--demean_maps', dest='demean_maps', action='store_true', help='Demean (common average rereference) maps before plotting')
argparser.add_argument('-n', '--ncols', dest='ncols', type=int, help='Plot this many maps per row')
argparser.add_argument('-i', '--isolines', dest='isolines', help='Draw iso lines at these values (comma separated; default: 0, Don\'t plot: None)')
argparser.add_argument('-l', '--scale_local', dest='scale_local', action='store_true', help='Scale each map instead of global max(abs)')
argparser.add_argument('-s', '--save_fig', dest='save_fig', action='store_true', help='Save plots to .png instead of showing them')
argparser.add_argument('-p', '--save_fig_pdf', dest='save_fig_pdf', action='store_true', help='Save plots to .pdf instead of showing them')
argparser.add_argument('-S', '--size', dest='size', help='Set size of the output in inch (one or two comma-separated values)')
argparser.add_argument('-v', '--vrange', dest='vrange', type=float, nargs=2, help='Set vertical scale [vmin vmax]')
args = argparser.parse_args()

import avg_q
import avg_q.numpy_Script
import matplotlib.pyplot as plt

isolines=[0]
if args.isolines:
 if args.isolines=='None':
  isolines=None
 else:
  isolines=[float(x) for x in args.isolines.split(',')]

size=None
if args.size:
 size=tuple([float(x) for x in args.size.split(',')])
 if len(size)==1:
  size=(size[0],size[0])

a=avg_q.avg_q()
figno=1
pngfile=None
for ascfile in args.ascfiles:
 if args.save_fig or args.save_fig_pdf:
  import os
  base,ext=os.path.splitext(ascfile)
  pngfile=base+('.pdf' if args.save_fig_pdf else '.png')
  if os.path.exists(pngfile):
   print("%s exists!" % pngfile)
   continue
  print("Plotting %s to %s" % (ascfile,pngfile))
 else:
  print("Plotting %s" % ascfile)
 fig=plt.figure(figno,figsize=size)
 fig.canvas.manager.set_window_title(ascfile)
 f=avg_q.avg_q_file(ascfile)
 epochsource=avg_q.Epochsource(f)
 script=avg_q.numpy_Script.numpy_Script(a)
 script.add_Epochsource(epochsource)
 if args.remove_channel:
  script.add_transform("remove_channel -n %(arg)s" % {'arg': args.remove_channel})
 if args.resample:
  script.add_transform("sliding_average %(resample)s %(resample)s" % {'resample': args.resample})
 if args.xrange:
  script.add_transform("trim -x %(from)s %(to)s" % {'from': args.xrange[0], 'to': args.xrange[1]})
 if args.demean_maps:
  script.add_transform("demean_maps")
 globalscale=False
 if args.vrange:
  vmin,vmax=args.vrange
 elif ascfile.endswith('_maps_scaled.asc'):
  vmin,vmax= -1,1
 else:
  vmin,vmax=None,None
  globalscale=not args.scale_local
 script.plot_maps(ncols=args.ncols,vmin=vmin,vmax=vmax,globalscale=globalscale,isolines=isolines)
 if args.save_fig:
  plt.savefig(pngfile,format='png',dpi=100,transparent=True,bbox_inches='tight',pad_inches=0)
  plt.close()
 elif args.save_fig_pdf:
  plt.savefig(pngfile,format='pdf',bbox_inches='tight',pad_inches=0)
  plt.close()
 else:
  figno+=1
a.close()

if not args.save_fig:
 plt.show()
 plt.close()
