#!/usr/bin/env python

import argparse

class get_timestamp(argparse.Action):
 def __call__(self, parser, namespace, values, option_string=None):
  import datetime
  setattr(namespace, self.dest, datetime.datetime.strptime(values,"%Y-%m-%d %H:%M:%S"))
  # starttime implies abstime
  setattr(namespace, 'abstime', True)

argparser = argparse.ArgumentParser(description='Read triggers from any file supported by avg_q and output as text trigger file to stdout.')
argparser.add_argument('files', nargs='+', help='Input files')
argparser.add_argument('-a', '--abstime', dest='abstime', action='store_true', help='Output absolute time')
argparser.add_argument('-A', '--starttime', dest='starttime', action=get_timestamp, help='Output absolute time using this start timestamp')
args = argparser.parse_args()

import sys
import os
import avg_q
import avg_q.trgfile
from avg_q.avg_q_file import formats_and_extensions

a=avg_q.avg_q()
#a.debug=True
for filename in args.files:
 parts=filename.split(':')
 if len(parts)==2 and parts[0] in dict(formats_and_extensions):
  filetype,filename=parts
 else:
  filetype=None
 if not os.path.exists(filename):
  print("Oops, %s doesn't exist - skipping..." % filename)
  continue
 base,ext=os.path.splitext(filename)
 if filetype is None and ext in ['.trg','.crs','.tri','.log','.vmrk','.xpe','.mkk']:
  # Assume trigger file
  if ext=='.log':
   # Assume Presentation log file
   import avg_q.Presentation
   trg=avg_q.Presentation.PresLogfile(filename)
  elif ext=='.vmrk':
   # Assume Brain Vision (TM) marker file
   import avg_q.BrainVision
   trg=avg_q.BrainVision.vmrkfile(filename)
  elif ext=='.xpe':
   # Assume Expyriment log file
   import avg_q.Expyriment
   trg=avg_q.Expyriment.ExpyrimentLogfile(filename)
  elif ext=='.mkk':
   # BT marker file
   import avg_q.Sleep.delphi_table
   mkkfile=avg_q.Sleep.delphi_table.delphi_table()
   mkkfile.read_file(filename)
   tuples=[(float(x[4]),1,'%s:%s:%s %s' % (x[0],x[1],x[2],x[3])) for x in mkkfile]
   trg=avg_q.trgfile.trgfile(source=tuples)
   trg.preamble['Sfreq']='1' # Entries are in seconds
  elif ext=='.tri':
   # nirx trigger file
   import avg_q.nirs
   trg=avg_q.nirs.nirx_trifile(filename)
  else:
   trg=avg_q.trgfile.trgfile(filename)
 else:
  infile=avg_q.avg_q_file(filename,filetype)
  trg=a.get_filetriggers(infile)
 if args.starttime:
  trg.start_datetime=args.starttime
 triggers=trg.gettuples_abstime() if args.abstime else trg.gettuples()
 if not args.abstime:
  sfreq=float(trg.preamble.get('Sfreq',100.0))
  triggers=[("%gs" % (trigger[0]/sfreq),)+trigger[1:] for trigger in triggers]
 trg.writetuples(triggers,sys.stdout)
 trg.close()
a.close()
