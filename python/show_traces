#!/usr/bin/env python
# Copyright (C) 2014-2018 Bernd Feige
# This file is part of avg_q and released under the GPL v3 (see avg_q/COPYING).

import argparse
argparser = argparse.ArgumentParser(description='Show asc file as color maps')
argparser.add_argument('ascfiles', nargs='+', help='asc files to plot')
argparser.add_argument('-a', '--axis', dest='axis', action='store_true', help='Show axis')
argparser.add_argument('-n', '--ncols', dest='ncols', type=int, help='Plot this many maps per row')
argparser.add_argument('-l', '--scale_local', dest='scale_local', action='store_true', help='Scale each trace instead of global scaling')
argparser.add_argument('-s', '--save_fig', dest='save_fig', action='store_true', help='Save plots to .png instead of showing them')
argparser.add_argument('-S', '--size', dest='size', help='Set size of the output in inch (one or two comma-separated values)')
argparser.add_argument('-x', '--x_is_latency', dest='x_is_latency', action='store_true', help='Transpose data matrix to make x=latency')
argparser.add_argument('-c', '--colorbar', dest='colorbar', action='store_true', help='Show a color bar legend')
args = argparser.parse_args()

import avg_q
import avg_q.numpy_Script
import matplotlib.pyplot as plt

size=None
if args.size:
 size=tuple([float(x) for x in args.size.split(',')])
 if len(size)==1:
  size=(size[0],size[0])

a=avg_q.avg_q()
figno=1
pngfile=None
for ascfile in args.ascfiles:
 if args.save_fig:
  import os
  base,ext=os.path.splitext(ascfile)
  pngfile=base+'.png'
  if os.path.exists(pngfile):
   print("%s exists!" % pngfile)
   continue
  print("Plotting %s to %s" % (ascfile,pngfile))
 else:
  print("Plotting %s" % ascfile)
 fig=plt.figure(figno,figsize=size)
 fig.canvas.manager.set_window_title(ascfile)
 f=avg_q.avg_q_file(ascfile)
 epochsource=avg_q.Epochsource(f)
 script=avg_q.numpy_Script.numpy_Script(a)
 script.add_Epochsource(epochsource)
 if args.scale_local:
  script.add_transform('scale_by invpointmaxabs')
 script.plot_traces(ncols=args.ncols,x_is_latency=args.x_is_latency)
 if args.axis:
  axes = plt.gca() # Get Current Axis
  axes.set_axis_on()
  axes.set_frame_on(False)
 if args.colorbar:
  plt.colorbar()
 if args.save_fig:
  plt.savefig(pngfile,format='png',dpi=100,transparent=True)
  plt.close()
 else:
  figno+=1
a.close()

if not args.save_fig:
 plt.show()
 plt.close()
